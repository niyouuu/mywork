Index: PyQt-Sqlite-Project-CURD-master/paManagement.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/PyQt-Sqlite-Project-CURD-master/paManagement.py b/PyQt-Sqlite-Project-CURD-master/paManagement.py
new file mode 100644
--- /dev/null	(date 1656603673970)
+++ b/PyQt-Sqlite-Project-CURD-master/paManagement.py	(date 1656603673970)
@@ -0,0 +1,376 @@
+from PyQt5 import QtWidgets
+from PyQt5.QtCore import *
+from PyQt5.QtSql import *
+from PyQt5.QtWidgets import *
+from PyQt5.QtGui import *
+#from PyQt5.QtWebEngineWidgets import QWebEngineView
+#from PyQt5.QtPrintSupport import *
+import sys,sqlite3
+from addDialog import addPaDialog
+
+class IndexWindow(QWidget):
+    def __init__(self, *args, **kwargs):
+        super(IndexWindow, self).__init__(*args, **kwargs)
+        self.resize(700, 500)
+        self.setWindowTitle("欢迎使用康复训练系统")
+        # 查询模型
+        self.queryModel = None
+        # 数据表
+        self.tableView = None
+        # 当前页
+        self.currentPage = 0
+        # 总页数
+        self.totalPage = 0
+        # 总记录数
+        self.totalRecord = 0
+        # 每页数据数
+        self.pageRecord = 10
+        # 当前患者名字
+        self.temp_paname=""
+        # 当前患者编号
+        self.temp_pano=""
+        self.setUpUI()
+
+    def setUpUI(self):
+        self.conn = sqlite3.connect("database.db")
+        self.c = self.conn.cursor()
+        # 添加sql语句
+        self.c.close()
+        self.setFixedSize(960, 700)
+
+        #选择患者
+        self.layout = QVBoxLayout()
+        self.indexlayout=QHBoxLayout()
+        self.pa_layout=QHBoxLayout()
+        self.Hlayout1 = QHBoxLayout()
+        self.pa_btns_laylout=QHBoxLayout()
+        self.Hlayout2 = QHBoxLayout()
+
+        #导航栏
+        # self.index_widget = QtWidgets.QWidget()  # 创建左侧部件
+        # self.index_widget.setObjectName('index_widget')
+        # self.index_widget.setLayout(self.indexlayout) # 设置左侧部件布局为网格
+
+        self.titlelabel=QLabel("康复训练")
+        font = self.titlelabel.font()
+        font.setPointSize(25)
+        font.setBold(1)
+        font.setFamily("黑体")
+        self.titlelabel.setFont(font)
+        index_btn_len=150
+        self.index_btn_1 = QtWidgets.QPushButton("首页")
+        self.index_btn_1.setObjectName('index_button')
+        self.index_btn_1.setFixedWidth(index_btn_len)
+        self.index_btn_2 = QtWidgets.QPushButton("训练任务")
+        self.index_btn_2.setObjectName('index_button')
+        self.index_btn_2.setFixedWidth(index_btn_len)
+        self.index_btn_3 = QtWidgets.QPushButton("患者管理")
+        self.index_btn_3.setObjectName('index_button')
+        self.index_btn_3.setFixedWidth(index_btn_len)
+        self.index_btn_4 = QtWidgets.QPushButton("系统管理")
+        self.index_btn_4.setObjectName('index_button')
+        self.index_btn_4.setFixedWidth(index_btn_len)
+        self.indexlayout.addWidget(self.titlelabel)
+        self.indexlayout.addWidget(self.index_btn_1)
+        self.indexlayout.addWidget(self.index_btn_2)
+        self.indexlayout.addWidget(self.index_btn_3)
+        self.indexlayout.addWidget(self.index_btn_4)
+
+        # 当前已选择患者
+
+        self.selected_pa_label=QLabel("当前选择的患者为：无")
+        self.pa_layout.addWidget(self.selected_pa_label)
+
+        # Hlayout1，查询功能
+        self.searchEdit = QLineEdit()
+        self.searchEdit.setFixedHeight(32)
+        font = QFont()
+        font.setPixelSize(15)
+        self.searchEdit.setFont(font)
+
+        self.searchButton = QPushButton("查询")
+        self.searchButton.setFixedHeight(32)
+        self.searchButton.setFont(font)
+        self.searchButton.setIcon(QIcon(QPixmap("./images/search.png")))
+
+        self.condisionComboBox = QComboBox()
+        searchCondision = ['按姓名查询', '按身份证号查询']
+        self.condisionComboBox.setFixedHeight(32)
+        self.condisionComboBox.setFont(font)
+        self.condisionComboBox.addItems(searchCondision)
+
+        self.Hlayout1.addWidget(self.searchEdit)
+        self.Hlayout1.addWidget(self.searchButton)
+        self.Hlayout1.addWidget(self.condisionComboBox)
+
+        # 增删改
+        self.addBtn=QPushButton("增加")
+        self.deleteBtn = QPushButton("删除")
+        self.alterBtn = QPushButton("修改")
+        self.detailBtn = QPushButton("查看")
+        self.pa_btns_laylout.addWidget(self.addBtn)
+        self.pa_btns_laylout.addWidget(self.deleteBtn)
+        self.pa_btns_laylout.addWidget(self.alterBtn)
+        self.pa_btns_laylout.addWidget(self.detailBtn)
+        self.addBtn.clicked.connect(self.addBtnClicked)
+        self.deleteBtn.clicked.connect(self.deleteBtnClicked)
+        # self.alterBtn.clicked.connect(self.alterBtnClicked)
+        # self.detailBtn.clicked.connect(self.detailBtnClicked)
+
+        # Hlayout2初始化，翻页功能
+        self.jumpToLabel = QLabel("跳转到第")
+        self.pageEdit = QLineEdit()
+        self.pageEdit.setFixedWidth(30)
+        s = "/" + str(self.totalPage) + "页"
+        self.pageLabel = QLabel(s)
+        self.jumpToButton = QPushButton("跳转")
+        self.prevButton = QPushButton("前一页")
+        self.prevButton.setFixedWidth(60)
+        self.backButton = QPushButton("后一页")
+        self.backButton.setFixedWidth(60)
+
+        Hlayout = QHBoxLayout()
+        Hlayout.addWidget(self.jumpToLabel)
+        Hlayout.addWidget(self.pageEdit)
+        Hlayout.addWidget(self.pageLabel)
+        Hlayout.addWidget(self.jumpToButton)
+        Hlayout.addWidget(self.prevButton)
+        Hlayout.addWidget(self.backButton)
+        widget = QWidget()
+        widget.setLayout(Hlayout)
+        widget.setFixedWidth(300)
+        self.Hlayout2.addWidget(widget)
+
+        # tableView
+        # 患者信息
+        self.db = QSqlDatabase.addDatabase("QSQLITE")
+        self.db.setDatabaseName('database.db')
+        self.db.open()
+        self.tableView = QTableView()
+        self.tableView.setSelectionBehavior(QAbstractItemView.SelectRows)  # 设置只能选中整行
+        self.tableView.setSelectionMode(QAbstractItemView.SingleSelection)  # 设置只能选中一行
+        self.func_mappingSignal()
+        # self.showPaImage()
+        index = self.tableView.currentIndex()  # 取得当前选中行的index
+        # self.model = QStandardItemModel()
+        # self.tableView.setModel(self.model)
+        # self.model = QStandardItemModel(5, 3)  # 创建一个标准的数据源model
+        # self.model.setHorizontalHeaderLabels(["id", "姓名", "年龄"])  # 设置表格的表头名称
+        # model=self.tableView.model()
+        # print(model.itemData(model.index(index.row(), 0)))
+        self.tableView.horizontalHeader().setStretchLastSection(True)
+        self.tableView.horizontalHeader().setSectionResizeMode(QHeaderView.Stretch)
+        self.tableView.setEditTriggers(QAbstractItemView.NoEditTriggers)
+        self.queryModel = QSqlQueryModel()
+        self.tableView.setModel(self.queryModel)
+        self.queryModel.setHeaderData(0, Qt.Horizontal, "姓名")
+        self.queryModel.setHeaderData(1, Qt.Horizontal, "性别")
+        self.queryModel.setHeaderData(2, Qt.Horizontal, "年龄")
+        self.queryModel.setHeaderData(3, Qt.Horizontal, "身份证号")
+
+
+        self.layout.addLayout(self.indexlayout)
+        self.layout.addLayout(self.pa_layout)
+        self.layout.addLayout(self.Hlayout1)
+        self.layout.addWidget(self.tableView)
+        self.layout.addLayout(self.pa_btns_laylout)
+        self.layout.addLayout(self.Hlayout2)
+        self.setLayout(self.layout)
+        self.searchButton.clicked.connect(self.searchButtonClicked)
+        self.prevButton.clicked.connect(self.prevButtonClicked)
+        self.backButton.clicked.connect(self.backButtonClicked)
+        self.jumpToButton.clicked.connect(self.jumpToButtonClicked)
+        self.searchEdit.returnPressed.connect(self.searchButtonClicked)
+
+    def func_mappingSignal(self):
+        self.tableView.clicked.connect(self.func_test)
+
+    def func_test(self, item):
+        # http://www.python-forum.org/viewtopic.php?f=11&t=16817
+        cellContent = item.data()
+        print(cellContent)  # test
+        sf = "You clicked on {0}x{1}".format(item.column(), item.row())
+        print(sf)
+        # 获取患者名字
+        NewIndex = self.tableView.currentIndex().siblingAtColumn(1)
+        Name = NewIndex.data()
+        self.selected_pa_label.setText("当前选择的患者为：" + Name)
+        self.temp_paname =Name
+        # 获取患者编号
+        pa_no_index = self.tableView.currentIndex().siblingAtColumn(0)
+        self.temp_pano = pa_no_index.data()
+
+    def addBtnClicked(self):
+        addDialog = addPaDialog(self)
+        # addDialog.add_pa_success_signal.connect(self.window.searchButtonClicked)
+        addDialog.show()
+        addDialog.exec_()
+        self.searchButtonClicked()
+    def deleteBtnClicked(self):
+        if(self.temp_pano==""):
+            print(QMessageBox.warning(self, "警告", "请选择一名患者", QMessageBox.Yes, QMessageBox.Yes))
+        else:
+            ret=QMessageBox.information(self, "提示", "是否删除患者"+self.temp_paname, QMessageBox.Yes, QMessageBox.No)
+            if(ret==QMessageBox.Yes):
+                db = QSqlDatabase.addDatabase("QSQLITE")
+                db.setDatabaseName('database.db')
+                db.open()
+                query = QSqlQuery()
+                # 如果已存在，则update Book表的现存量，剩余可借量，不存在，则insert Book表，同时insert buyordrop表
+                sql = "SELECT * FROM patient WHERE pa_no='%s'" % (self.temp_pano)
+                query.exec_(sql)
+                # 提示不存在
+                if not (query.next()):
+                    print(QMessageBox.warning(self, "警告", "该患者不存在", QMessageBox.Yes, QMessageBox.Yes))
+                    return
+                else:
+                    sql = "DELETE FROM patient WHERE pa_no='%s'" % (self.temp_pano)
+                    query.exec_(sql)
+                    db.commit()
+                    print(QMessageBox.information(self, "提示", "删除成功，患者"+self.temp_paname+"已删除", QMessageBox.Yes, QMessageBox.Yes))
+                    self.temp_pano=""
+                    self.temp_paname=""
+                    self.selected_pa_label.setText("当前选择的患者为：")
+        self.searchButtonClicked()
+    #展示图片
+    # def showPaImage(self):
+    #     # imageItem = QStandardItem(QIcon("pa_head/pa_0"))
+    #     image_path="pa_head/pa_0"
+    #     imageItem = QtGui.QPixmap(image_path).scaled(300, 300)
+    #     img = mping.imread('path')  # 相对路径
+    #     self.tableView.setItem(0, 6, imageItem)
+    # 查询
+    def recordQuery(self, index):
+        queryCondition = ""
+        conditionChoice = self.condisionComboBox.currentText()
+        if (conditionChoice == "按姓名查询"):
+            conditionChoice = 'pa_name'
+        elif (conditionChoice == "按身份证号查询"):
+            conditionChoice = 'pa_id'
+
+        if (self.searchEdit.text() == ""):
+            queryCondition = "select * from patient"
+            self.queryModel.setQuery(queryCondition)
+            self.totalRecord = self.queryModel.rowCount()
+            self.totalPage = int((self.totalRecord + self.pageRecord - 1) / self.pageRecord)
+            label = "/" + str(int(self.totalPage)) + "页"
+            self.pageLabel.setText(label)
+            queryCondition = ("select * from patient ORDER BY %s  limit %d,%d " % (conditionChoice,index, self.pageRecord))
+            self.queryModel.setQuery(queryCondition)
+            self.setButtonStatus()
+            return
+
+        # 得到模糊查询条件
+        temp = self.searchEdit.text()
+        s = '%'
+        for i in range(0, len(temp)):
+            s = s + temp[i] + "%"
+        queryCondition = ("SELECT * FROM patient WHERE %s LIKE '%s' ORDER BY %s " % (
+            conditionChoice, s,conditionChoice))
+        self.queryModel.setQuery(queryCondition)
+        self.totalRecord = self.queryModel.rowCount()
+        # 当查询无记录时的操作
+        if(self.totalRecord==0):
+            print(QMessageBox.information(self,"提醒","查询无记录",QMessageBox.Yes,QMessageBox.Yes))
+            queryCondition = "select * from patient"
+            self.queryModel.setQuery(queryCondition)
+            self.totalRecord = self.queryModel.rowCount()
+            self.totalPage = int((self.totalRecord + self.pageRecord - 1) / self.pageRecord)
+            label = "/" + str(int(self.totalPage)) + "页"
+            self.pageLabel.setText(label)
+            queryCondition = ("select * from patient ORDER BY %s  limit %d,%d " % (conditionChoice,index, self.pageRecord))
+            self.queryModel.setQuery(queryCondition)
+            self.setButtonStatus()
+            return
+        self.totalPage = int((self.totalRecord + self.pageRecord - 1) / self.pageRecord)
+        label = "/" + str(int(self.totalPage)) + "页"
+        self.pageLabel.setText(label)
+        queryCondition = ("SELECT * FROM patient WHERE %s LIKE '%s' ORDER BY %s LIMIT %d,%d " % (
+            conditionChoice, s, conditionChoice,index, self.pageRecord))
+        self.queryModel.setQuery(queryCondition)
+        self.setButtonStatus()
+        return
+
+    def setButtonStatus(self):
+        if (self.currentPage == self.totalPage):
+            self.prevButton.setEnabled(True)
+            self.backButton.setEnabled(False)
+        if (self.currentPage == 1):
+            self.backButton.setEnabled(True)
+            self.prevButton.setEnabled(False)
+        if (self.currentPage < self.totalPage and self.currentPage > 1):
+            self.prevButton.setEnabled(True)
+            self.backButton.setEnabled(True)
+
+    # 得到记录数
+    def getTotalRecordCount(self):
+        self.queryModel.setQuery("SELECT * FROM patient")
+        self.totalRecord = self.queryModel.rowCount()
+        return
+
+    # 得到总页数
+    def getPageCount(self):
+        self.getTotalRecordCount()
+        # 上取整
+        self.totalPage = int((self.totalRecord + self.pageRecord - 1) / self.pageRecord)
+        return
+
+    # 点击查询
+    def searchButtonClicked(self):
+        self.currentPage = 1
+        self.pageEdit.setText(str(self.currentPage))
+        self.getPageCount()
+        s = "/" + str(int(self.totalPage)) + "页"
+        self.pageLabel.setText(s)
+        index = (self.currentPage - 1) * self.pageRecord
+        self.recordQuery(index)
+        return
+
+        # 向前翻页
+
+    def prevButtonClicked(self):
+        self.currentPage -= 1
+        if (self.currentPage <= 1):
+            self.currentPage = 1
+        self.pageEdit.setText(str(self.currentPage))
+        index = (self.currentPage - 1) * self.pageRecord
+        self.recordQuery(index)
+        return
+
+        # 向后翻页
+
+    def backButtonClicked(self):
+        self.currentPage += 1
+        if (self.currentPage >= int(self.totalPage)):
+            self.currentPage = int(self.totalPage)
+        self.pageEdit.setText(str(self.currentPage))
+        index = (self.currentPage - 1) * self.pageRecord
+        self.recordQuery(index)
+        return
+
+        # 点击跳转
+
+    def jumpToButtonClicked(self):
+        if (self.pageEdit.text().isdigit()):
+            self.currentPage = int(self.pageEdit.text())
+            if (self.currentPage > self.totalPage):
+                self.currentPage = self.totalPage
+            if (self.currentPage <= 1):
+                self.currentPage = 1
+        else:
+            self.currentPage = 1
+        index = (self.currentPage - 1) * self.pageRecord
+        self.pageEdit.setText(str(self.currentPage))
+        self.recordQuery(index)
+        return
+
+app = QApplication(sys.argv)
+# if(passdlg.exec_() == QDialog.Accepted):
+#     window = IndexWindow()
+#     window.show()
+#     window.searchButtonClicked()
+#     # window.loaddata()
+window = IndexWindow()
+window.show()
+window.searchButtonClicked()
+sys.exit(app.exec_())
\ No newline at end of file
Index: PyQt-Sqlite-Project-CURD-master/temp.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/PyQt-Sqlite-Project-CURD-master/temp.py b/PyQt-Sqlite-Project-CURD-master/temp.py
new file mode 100644
--- /dev/null	(date 1656569730992)
+++ b/PyQt-Sqlite-Project-CURD-master/temp.py	(date 1656569730992)
@@ -0,0 +1,105 @@
+#!/usr/bin/env python
+
+
+from PyQt5.QtCore import *
+from PyQt5.QtGui import *
+from PyQt5.QtWidgets import *
+
+import time
+
+
+class SpinBoxDelegate(QItemDelegate, ):
+    def __init__(self, parent=None, *args):
+        super(SpinBoxDelegate, self).__init__(parent, *args)
+        self.timer = QTimer()
+
+    def paint(self, painter, option, index):
+        item = self.getPixmat(index, option)
+        pixmap = item['pixmap']
+        #            print(option.rect, type(option.rect))
+        #        painter.fillRect(option.rect, option.palette.highlight())
+        if item['bool'] == False:
+            super(SpinBoxDelegate, self).paint(painter, option, index)
+
+        else:
+            painter.drawPixmap(option.rect.x(),
+                               option.rect.y(),
+                               item['width'],
+                               item['height'],
+                               pixmap)
+
+    def sizeHint(self, option, index):
+        item = self.getPixmat(index, option)
+        if item['bool'] == True:
+            width = item['width']
+            height = item['height']
+            return QSize(width, height)
+        else:
+            return super(SpinBoxDelegate, self).sizeHint(option, index)
+
+    def createEditor(self, parent, option, index):
+
+        editor = QLineEdit(parent)
+        return editor
+
+    def setEditorData(self, lineEdit, index):
+        value = index.model().data(index, Qt.EditRole)
+        lineEdit.setText(str(value))
+
+    def setModelData(self, lineEdit, model, index):
+        value = lineEdit.text()
+        model.setData(index, value, Qt.EditRole)
+
+    def updateEditorGeometry(self, editor, option, index):
+        editor.setGeometry(option.rect)
+
+    def getPixmat(self, index, option):
+        '''如果index中有.jpg或.png，把路径转换为pixmap。<br>
+        如果图片宽 > 格 且高 < 150 ， 设置宽300，高为原高；<br>
+        如果图片宽 <150 且高 > 150 ， 设置宽为原宽，高为150；<br>
+        如果图片宽 <150 且高 < 150 ， 设置宽为原宽，高为原高；<br>
+        '''
+        editor = str(index.data())
+        pixmap = QPixmap()
+        if 'jpg' in editor.split('.') or 'png' in editor.split('.'):
+            pixmap.load(editor)
+            if pixmap.size().width() > option.rect.width() and pixmap.size().height() < 150:
+                return {'pixmap': pixmap, 'bool': True,
+                        'width': 300,
+                        'height': pixmap.size().height()}
+            elif pixmap.size().width() < 150 and pixmap.size().height() > 150:
+                return {'pixmap': pixmap, 'bool': True,
+                        'width': pixmap.size().width(),
+                        'height': 150}
+            elif pixmap.size().width() > 150 and pixmap.size().height() > 150:
+                return {'pixmap': pixmap, 'bool': True,
+                        'width': 150,
+                        'height': 150}
+            elif pixmap.size().width() < 150 and pixmap.size().height() < 150:
+                return {'pixmap': pixmap, 'bool': True,
+                        'width': pixmap.size().width(),
+                        'height': pixmap.size().height()}
+            else:
+                return {'pixmap': pixmap, 'bool': True,
+                        'width': pixmap.size().width(),
+                        'height': pixmap.size().height()}
+
+        else:
+            return {'pixmap': '可输入文字', 'bool': False}
+
+    def eventFilter(self, obj, event):
+        '''按下Ctrl+V后，如果粘贴板是图片，命名图片保存在ima文件夹下，<br>
+           把名字给粘贴板，再把图片还原到粘贴板。'''
+        if event.type() == QEvent.KeyPress:
+            if event.key() == Qt.Key_V and event.modifiers() == Qt.ControlModifier:
+
+                clipboard = QApplication.clipboard()
+                data = clipboard.mimeData()
+                if data.hasImage():
+                    filename = 'db/ima/' + time.strftime("%Y_%m_%d_%H_%M_%S", time.localtime()) + '.jpg'
+                    data.imageData().save(filename, 'JPG', 90)
+                    im = data.imageData()
+                    clipboard.setText(filename)
+                    self.timer.singleShot(200, lambda: clipboard.setImage(im))
+
+        return False
\ No newline at end of file
